{"version":3,"sources":["components/wrapper/wrapper.js","components/image/image.js","ClickyGame.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Image","id","src","url","onClick","handleImageChange","alt","ClickyGame","state","images","imageClickedId","score","totalScore","topScore","_this","includes","setState","push","length","i","j","Math","floor","random","_ref","_this2","this","wrapper_wrapper","map","img","components_image_image","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_ClickyGame_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wyCAKeA,SAFC,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,YCO1CC,SAPD,SAAAN,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKI,GAAIP,EAAMO,GAAIC,IAAKR,EAAMS,IAC5BC,QAAS,kBAAMV,EAAMW,kBAAkBX,EAAMO,KAAKK,IAAI,kCCoE/CC,6MAlEbC,MAAQ,CACNC,SACAC,eAAgB,GAChBC,MAAO,EACPC,WAAY,EACZC,SAAU,KAGZR,kBAAoB,SAAAJ,GAClB,IAAIS,EAAiBI,EAAKN,MAAME,eAEhC,GAAKA,EAAeK,SAASd,GA0B3B,OALIa,EAAKN,MAAMG,MAAQG,EAAKN,MAAMI,aAEhCE,EAAKN,MAAMK,SAAWC,EAAKN,MAAMI,iBAEnCE,EAAKE,SAAS,CAAEN,eAAgB,GAAIC,MAAO,EAAGC,WAAYE,EAAKN,MAAMK,WAtBrE,GAFAH,EAAeO,KAAKhB,GAEU,KAA1BS,EAAeQ,OAAnB,CAKIJ,EAAKN,MAAMG,OAASG,EAAKN,MAAMI,aAEjCE,EAAKN,MAAMK,SAAWC,EAAKN,MAAMG,MAAQ,GAE3CG,EAAKE,SAAS,CAAEP,SAAQC,iBAAgBC,MAAOD,EAAeQ,OAAQN,WAAYE,EAAKN,MAAMK,WAE7F,IAAK,IAAIM,EAAIV,EAAOS,OAAS,EAAGC,EAAI,EAAGA,IAAK,CAC1C,IAAIC,EAAIC,KAAKC,MAAOD,KAAKE,SAAYJ,EAAM,GADDK,EAEjB,CAACf,EAAOU,GAAIV,EAAOW,IAA3CX,EAAOW,GAFkCI,EAAA,GAE9Bf,EAAOU,GAFuBK,EAAA,SAV1CV,EAAKE,SAAS,CAAEL,MAAO,GAAIC,WAAY,GAAIF,eAAgB,8EA0BxD,IAAAe,EAAAC,KACP,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,4BACAH,EAAAC,EAAAC,cAAA,qBAAa6B,KAAKlB,MAAMG,MAAxB,IAA+BhB,EAAAC,EAAAC,cAAA,mBAA/B,eAA4D6B,KAAKlB,MAAMI,aAGzEjB,EAAAC,EAAAC,cAAC8B,EAAD,KACGD,KAAKlB,MAAMC,OAAOmB,IAAI,SAAAC,GAAG,OACxBlC,EAAAC,EAAAC,cAACiC,EAAD,CACEzB,kBAAmBoB,EAAKpB,kBACxBJ,GAAI4B,EAAI5B,GACRE,IAAK0B,EAAI1B,SAIfR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6FA/DiBkC,aCMLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAAgBC,SAASC,eAAe,SDwHlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8ae44360.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./image.css\";\r\n\r\nconst Image = props => (\r\n  <div className=\"image\">\r\n      <img id={props.id} src={props.url}\r\n        onClick={() => props.handleImageChange(props.id)} alt=\"clicky game\" />\r\n  </div>\r\n);\r\n\r\nexport default Image;","import React, { Component } from \"react\";\r\nimport Wrapper from \"./components/wrapper\";\r\nimport Image from \"./components/image\"\r\nimport \"./ClickyGame.css\";\r\nimport images from \"./images.json\";\r\n\r\nclass ClickyGame extends Component {\r\n  //state comes here\r\n  state = {\r\n    images,\r\n    imageClickedId: [],\r\n    score: 0,\r\n    totalScore: 0,\r\n    topScore: 0\r\n  };\r\n\r\n  handleImageChange = id => {\r\n    var imageClickedId = this.state.imageClickedId;\r\n    // check to see if it's first time or not\r\n    if (!imageClickedId.includes(id)) {\r\n      imageClickedId.push(id)\r\n      // if all images in json displayed\r\n      if (imageClickedId.length === 12) {\r\n        this.setState({ score: 12, totalScore: 12, imageClickedId: [] });\r\n        return;\r\n      }\r\n      // if it's a winner\r\n      if (this.state.score >= this.state.totalScore) {\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.topScore = this.state.score + 1;\r\n      }\r\n      this.setState({ images, imageClickedId, score: imageClickedId.length, totalScore: this.state.topScore });\r\n      // random generating image for all images\r\n      for (var i = images.length - 1; i > 0; i--) {\r\n        var j = Math.floor((Math.random() * (i)) + 0);\r\n        [images[j], images[i]] = [images[i], images[j]];\r\n      }\r\n\r\n    } else {\r\n      //lost game over\r\n      if (this.state.score < this.state.totalScore) {\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.topScore = this.state.totalScore;\r\n      }\r\n      this.setState({ imageClickedId: [], score: 0, totalScore: this.state.topScore });\r\n      return;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-logo\">Clicky Game</h1>\r\n          <p className=\"App-title\">Click an image to begin!</p>\r\n          <h1> Score: {this.state.score} <span> | </span> Top Score: {this.state.totalScore}</h1>\r\n        </header>\r\n\r\n        <Wrapper>\r\n          {this.state.images.map(img => (\r\n            <Image\r\n              handleImageChange={this.handleImageChange}\r\n              id={img.id}\r\n              url={img.url}\r\n            />\r\n          ))}\r\n        </Wrapper>\r\n        <hr></hr>\r\n        <p>Click on an image to earn points, but don't click on any more than once!</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ClickyGame;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// eslint-disable-next-line no-unused-vars\nimport ClickyGame from './ClickyGame';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-no-undef\nReactDOM.render(<ClickyGame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}